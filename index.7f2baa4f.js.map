{"mappings":"ACAA,MAAM,EAA2B,SAAS,cAAc,SAClD,EACJ,SAAS,cAAc,qBACnB,EAA6B,SAAS,cAAc,UACpD,EAA0B,SAAS,cAAc,SACjD,EACJ,SAAS,cAAc,cACnB,EACJ,SAAS,cAAc,cACnB,EAAiC,SAAS,cAAc,SACxD,EAA+B,SAAS,cAAc,cACtD,EACJ,SAAS,iBAAiB,sBAE5B,IAAI,EAAwC,KAiG5C,MAAM,EAAM,IA/FZ,MAQE,YACE,CAAuB,CACvB,CAAyB,CACzB,CAAkB,CAClB,CARF,IAAA,CAAA,KAAO,CACL,MAAO,EACP,OAAQ,CACV,EAME,IAAI,CAAC,MAAQ,EACb,IAAI,CAAC,OAAS,EACd,IAAI,CAAC,GAAK,EACV,IAAI,CAAC,WACP,CAMA,YAAY,CAAiB,CAAE,EAAgB,CAAC,CAAE,CAC5C,EAAY,EACd,IAAI,CAAC,MAAM,YAAc,KAAK,IAAI,EAAG,IAAI,CAAC,MAAM,YAAc,EAAQ,IAEtE,IAAI,CAAC,MAAM,YAAc,KAAK,IAC5B,IAAI,CAAC,MAAM,SACX,IAAI,CAAC,MAAM,YAAc,EAAQ,GAEvC,CACA,gBAAiB,CACX,IAAI,CAAC,MAAM,MAAO,IAAI,CAAC,MAAM,YAAc,EACtC,IAAI,CAAC,MAAM,OAAQ,IAAI,CAAC,MAAM,OAClC,IAAI,CAAC,MAAM,OAClB,CACA,MAAO,CACL,IAAM,EACJ,IAAI,CAAC,OAAO,WAAW,MAErB,IAEF,EAAQ,UAAU,EAAG,EAAG,IAAI,CAAC,KAAK,MAAO,IAAI,CAAC,KAAK,QAEnD,EAAQ,UAAU,IAAI,CAAC,MAAO,EAAG,EAAG,IAAI,CAAC,KAAK,MAAO,IAAI,CAAC,KAAK,QAEnE,CACA,QAAS,CACP,IAAI,CAAC,KAAO,CACV,MAAO,IAAI,CAAC,MAAM,WAClB,OAAQ,IAAI,CAAC,MAAM,WACrB,EACA,IAAI,CAAC,MAAM,MAAQ,IAAI,CAAC,KAAK,MAC7B,IAAI,CAAC,MAAM,OAAS,IAAI,CAAC,KAAK,OAE9B,IAAI,CAAC,OAAO,MAAQ,IAAI,CAAC,KAAK,MAC9B,IAAI,CAAC,OAAO,OAAS,IAAI,CAAC,KAAK,OAC/B,IAAM,EAAS,CAAC,EAAG,KACjB,IAAI,CAAC,OACL,IAAI,CAAC,OAAO,GACZ,IAAI,CAAC,MAAM,0BAA0B,EACvC,EACA,IAAI,CAAC,MAAM,0BAA0B,EACvC,CAEA,OAAO,CAAI,CAAE,CACX,IAAI,EAAa,GACjB,OAAO,QAAQ,GAAQ,CAAC,GAAG,QACzB,CAAC,CAAC,EAAG,EAAE,GACJ,GAAc,CAAC;;;UAGd,EAAE,EAAE;;;UAGJ,EAAE,EAAE;;;IAGV,CAAC,EAED,IAAI,CAAC,GAAG,UAAY,AAAe,KAAf,EAAoB,UAAY,CACtD,CACA,MAAO,CACL,IAAM,EAAQ,SAAS,cAAc,IACrC,CAAA,EAAM,KAAO,IAAI,CAAC,OAAO,UAAU,aACnC,EAAM,SAAW,aACjB,EAAM,OACR,CACA,WAAY,CACV,IAAI,CAAC,MAAM,iBAAiB,OAAQ,IAAM,IAAI,CAAC,QAC/C,IAAI,CAAC,MAAM,iBAAiB,QAAS,IAAM,IAAI,CAAC,OAClD,CACF,EAE4B,EAAQ,EAAS,GAE7C,EAAM,iBAAiB,SAAU,KAC/B,GAAI,EAAM,OAAO,OAAQ,CACvB,IAAM,EAAa,EAAM,KAAK,CAAC,EAAE,CAC7B,IACE,GACF,IAAI,gBAAgB,GAEtB,EAAyB,IAAI,gBAAgB,GAC7C,EAAO,IAAM,EACb,EAAO,iBAAiB,UAAW,KACjC,EAAI,QACN,GAEJ,CACF,GAEA,EAAgB,iBAAiB,QAAS,IAAM,EAAI,YAAY,KAChE,EAAgB,iBAAiB,QAAS,IAAM,EAAI,YAAY,IAChE,EAAY,iBAAiB,QAAS,IAAM,EAAI,QAChD,EAAW,QAAQ,AAAC,IAClB,EAAE,iBAAiB,QAAS,KAC1B,EAAiB,MAAM,WAAa,CAAC,EAAE,EAAE,QAAQ,MAAM,CAAC,AAC1D,EACF","sources":["<anon>","src/index.ts"],"sourcesContent":["const _video = document.querySelector(\"video\");\nconst _canvasContainer = document.querySelector(\".canvas-container\");\nconst _canvas = document.querySelector(\"canvas\");\nconst _file = document.querySelector(\"#file\");\nconst _frameDecButton = document.querySelector(\"#dec-frame\");\nconst _frameIncButton = document.querySelector(\"#inc-frame\");\nconst _saveButton = document.querySelector(\"#save\");\nconst _uiContainer = document.querySelector(\"#meta-grid\");\nconst _bgButtons = document.querySelectorAll(\"button[data-color]\");\nlet _prevUploadedObjectUrl = null;\nclass VideoPoster {\n    constructor(video, canvas, UI){\n        this.meta = {\n            width: 0,\n            height: 0\n        };\n        this.video = video;\n        this.canvas = canvas;\n        this.UI = UI;\n        this.addEvents();\n    }\n    /**\n   *\n   * @param direction 1 represents number of  frame forward , -1 represents number of  frame backwards\n   */ moveByFrame(direction, frame = 1) {\n        if (direction < 0) this.video.currentTime = Math.max(0, this.video.currentTime - frame / 25);\n        else this.video.currentTime = Math.min(this.video.duration, this.video.currentTime + frame / 25);\n    }\n    playPauseVideo() {\n        if (this.video.ended) this.video.currentTime = 0;\n        else if (this.video.paused) this.video.play();\n        else this.video.pause();\n    }\n    draw() {\n        const context = this.canvas.getContext(\"2d\");\n        if (context) {\n            // Have to clear the previous frame for transparent background videos\n            context.clearRect(0, 0, this.meta.width, this.meta.height);\n            // Drawing Video on canvas\n            context.drawImage(this.video, 0, 0, this.meta.width, this.meta.height);\n        }\n    }\n    onLoad() {\n        this.meta = {\n            width: this.video.videoWidth,\n            height: this.video.videoHeight\n        };\n        this.video.width = this.meta.width;\n        this.video.height = this.meta.height;\n        this.canvas.width = this.meta.width;\n        this.canvas.height = this.meta.height;\n        const ticker = (_, meta)=>{\n            this.draw();\n            this.drawUI(meta);\n            this.video.requestVideoFrameCallback(ticker);\n        };\n        this.video.requestVideoFrameCallback(ticker);\n    }\n    drawUI(meta) {\n        let htmlString = \"\";\n        Object.entries(meta || {}).forEach(([k, v])=>htmlString += `\n      <div>\n        <div class=\"text-base capitalize font-semibold\">\n          ${k}\n        </div>\n        <div class=\"text-sm\">\n          ${v}\n        </div>\n      </div>\n    `);\n        this.UI.innerHTML = htmlString === \"\" ? \"No data\" : htmlString;\n    }\n    save() {\n        const alink = document.createElement(\"a\");\n        alink.href = this.canvas.toDataURL(\"image/png\");\n        alink.download = \"poster.png\";\n        alink.click();\n    }\n    addEvents() {\n        this.video.addEventListener(\"play\", ()=>this.draw());\n        this.video.addEventListener(\"pause\", ()=>this.draw());\n    }\n}\nconst app = new VideoPoster(_video, _canvas, _uiContainer);\n_file.addEventListener(\"change\", ()=>{\n    if (_file.files?.length) {\n        const file = _file.files[0];\n        if (_video) {\n            if (_prevUploadedObjectUrl) URL.revokeObjectURL(_prevUploadedObjectUrl);\n            _prevUploadedObjectUrl = URL.createObjectURL(file);\n            _video.src = _prevUploadedObjectUrl;\n            _video.addEventListener(\"canplay\", ()=>{\n                app.onLoad();\n            });\n        }\n    }\n});\n_frameDecButton.addEventListener(\"click\", ()=>app.moveByFrame(-1));\n_frameIncButton.addEventListener(\"click\", ()=>app.moveByFrame(1));\n_saveButton.addEventListener(\"click\", ()=>app.save());\n_bgButtons.forEach((b)=>{\n    b.addEventListener(\"click\", ()=>{\n        _canvasContainer.style.background = `${b.dataset.color}`;\n    });\n});\n\n//# sourceMappingURL=index.7f2baa4f.js.map\n","const _video: HTMLVideoElement = document.querySelector(\"video\")!;\nconst _canvasContainer: HTMLDivElement =\n  document.querySelector(\".canvas-container\")!;\nconst _canvas: HTMLCanvasElement = document.querySelector(\"canvas\")!;\nconst _file: HTMLInputElement = document.querySelector(\"#file\")!;\nconst _frameDecButton: HTMLButtonElement =\n  document.querySelector(\"#dec-frame\")!;\nconst _frameIncButton: HTMLButtonElement =\n  document.querySelector(\"#inc-frame\")!;\nconst _saveButton: HTMLButtonElement = document.querySelector(\"#save\")!;\nconst _uiContainer: HTMLDivElement = document.querySelector(\"#meta-grid\")!;\nconst _bgButtons: NodeListOf<HTMLButtonElement> =\n  document.querySelectorAll(\"button[data-color]\");\n\nlet _prevUploadedObjectUrl: string | null = null;\n\nclass VideoPoster {\n  video: HTMLVideoElement;\n  canvas: HTMLCanvasElement;\n  UI: HTMLDivElement;\n  meta = {\n    width: 0,\n    height: 0,\n  };\n  constructor(\n    video: HTMLVideoElement,\n    canvas: HTMLCanvasElement,\n    UI: HTMLDivElement\n  ) {\n    this.video = video;\n    this.canvas = canvas;\n    this.UI = UI;\n    this.addEvents();\n  }\n\n  /**\n   *\n   * @param direction 1 represents number of  frame forward , -1 represents number of  frame backwards\n   */\n  moveByFrame(direction: number, frame: number = 1) {\n    if (direction < 0)\n      this.video.currentTime = Math.max(0, this.video.currentTime - frame / 25);\n    else\n      this.video.currentTime = Math.min(\n        this.video.duration,\n        this.video.currentTime + frame / 25\n      );\n  }\n  playPauseVideo() {\n    if (this.video.ended) this.video.currentTime = 0;\n    else if (this.video.paused) this.video.play();\n    else this.video.pause();\n  }\n  draw() {\n    const context: CanvasRenderingContext2D | null =\n      this.canvas.getContext(\"2d\");\n\n    if (context) {\n      // Have to clear the previous frame for transparent background videos\n      context.clearRect(0, 0, this.meta.width, this.meta.height);\n      // Drawing Video on canvas\n      context.drawImage(this.video, 0, 0, this.meta.width, this.meta.height);\n    }\n  }\n  onLoad() {\n    this.meta = {\n      width: this.video.videoWidth,\n      height: this.video.videoHeight,\n    };\n    this.video.width = this.meta.width;\n    this.video.height = this.meta.height;\n\n    this.canvas.width = this.meta.width;\n    this.canvas.height = this.meta.height;\n    const ticker = (_, meta) => {\n      this.draw();\n      this.drawUI(meta);\n      this.video.requestVideoFrameCallback(ticker);\n    };\n    this.video.requestVideoFrameCallback(ticker);\n  }\n\n  drawUI(meta) {\n    let htmlString = \"\";\n    Object.entries(meta || {}).forEach(\n      ([k, v]) =>\n        (htmlString += `\n      <div>\n        <div class=\"text-base capitalize font-semibold\">\n          ${k}\n        </div>\n        <div class=\"text-sm\">\n          ${v}\n        </div>\n      </div>\n    `)\n    );\n    this.UI.innerHTML = htmlString === \"\" ? \"No data\" : htmlString;\n  }\n  save() {\n    const alink = document.createElement(\"a\");\n    alink.href = this.canvas.toDataURL(\"image/png\");\n    alink.download = \"poster.png\";\n    alink.click();\n  }\n  addEvents() {\n    this.video.addEventListener(\"play\", () => this.draw());\n    this.video.addEventListener(\"pause\", () => this.draw());\n  }\n}\n\nconst app = new VideoPoster(_video, _canvas, _uiContainer);\n\n_file.addEventListener(\"change\", () => {\n  if (_file.files?.length) {\n    const file: File = _file.files[0];\n    if (_video) {\n      if (_prevUploadedObjectUrl) {\n        URL.revokeObjectURL(_prevUploadedObjectUrl);\n      }\n      _prevUploadedObjectUrl = URL.createObjectURL(file);\n      _video.src = _prevUploadedObjectUrl;\n      _video.addEventListener(\"canplay\", () => {\n        app.onLoad();\n      });\n    }\n  }\n});\n\n_frameDecButton.addEventListener(\"click\", () => app.moveByFrame(-1));\n_frameIncButton.addEventListener(\"click\", () => app.moveByFrame(1));\n_saveButton.addEventListener(\"click\", () => app.save());\n_bgButtons.forEach((b) => {\n  b.addEventListener(\"click\", () => {\n    _canvasContainer.style.background = `${b.dataset.color}`;\n  });\n});\n"],"names":["_video","document","querySelector","_canvasContainer","_canvas","_file","_frameDecButton","_frameIncButton","_saveButton","_uiContainer","_bgButtons","querySelectorAll","_prevUploadedObjectUrl","app","constructor","video","canvas","UI","meta","width","height","addEvents","moveByFrame","direction","frame","currentTime","Math","max","min","duration","playPauseVideo","ended","paused","play","pause","draw","context","getContext","clearRect","drawImage","onLoad","videoWidth","videoHeight","ticker","_","drawUI","requestVideoFrameCallback","htmlString","Object","entries","forEach","k","v","innerHTML","save","alink","createElement","href","toDataURL","download","click","addEventListener","files","length","file","URL","revokeObjectURL","createObjectURL","src","b","style","background","dataset","color"],"version":3,"file":"index.7f2baa4f.js.map"}
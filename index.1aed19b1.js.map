{"mappings":"AAAA,MAAMA,OAA2BC,SAASC,cAAc,SAClDC,QAA6BF,SAASC,cAAc,UACpDE,MAA0BH,SAASC,cAAc,SACjDG,gBACJJ,SAASC,cAAc,cACnBI,gBACJL,SAASC,cAAc,cACnBK,YAAiCN,SAASC,cAAc,SACxDM,aAA+BP,SAASC,cAAc,cAE5D,IAAIO,uBAAwC,KAE5C,MAAMC,YAIJC,KAAO,CACLC,MAAO,EACPC,OAAQ,GAEVC,YACEC,EACAC,EACAC,GAEAC,KAAKH,MAAQA,EACbG,KAAKF,OAASA,EACdE,KAAKD,GAAKA,EACVC,KAAKC,WACP,CAMAC,YAAYC,EAAmBC,EAAgB,GAE3CJ,KAAKH,MAAMQ,YADTF,EAAY,EACWG,KAAKC,IAAI,EAAGP,KAAKH,MAAMQ,YAAcD,EAAQ,IAE7CE,KAAKE,IAC5BR,KAAKH,MAAMY,SACXT,KAAKH,MAAMQ,YAAcD,EAAQ,GAEvC,CACAM,iBACMV,KAAKH,MAAMc,MAAOX,KAAKH,MAAMQ,YAAc,EACtCL,KAAKH,MAAMe,OAAQZ,KAAKH,MAAMgB,OAClCb,KAAKH,MAAMiB,OAClB,CACAC,OACE,MAAMC,EACJhB,KAAKF,OAAOmB,WAAW,MAErBD,IAEFA,EAAQE,UAAU,EAAG,EAAGlB,KAAKP,KAAKC,MAAOM,KAAKP,KAAKE,QAEnDqB,EAAQG,UAAUnB,KAAKH,MAAO,EAAG,EAAGG,KAAKP,KAAKC,MAAOM,KAAKP,KAAKE,QAEnE,CACAyB,SACEpB,KAAKP,KAAO,CACVC,MAAOM,KAAKH,MAAMwB,WAClB1B,OAAQK,KAAKH,MAAMyB,aAErBtB,KAAKH,MAAMH,MAAQM,KAAKP,KAAKC,MAC7BM,KAAKH,MAAMF,OAASK,KAAKP,KAAKE,OAE9BK,KAAKF,OAAOJ,MAAQM,KAAKP,KAAKC,MAC9BM,KAAKF,OAAOH,OAASK,KAAKP,KAAKE,OAC/B,MAAM4B,EAAS,CAACC,EAAG/B,KACjBO,KAAKe,OACLf,KAAKyB,OAAOhC,GACZO,KAAKH,MAAM6B,0BAA0BH,EAAA,EAEvCvB,KAAKH,MAAM6B,0BAA0BH,EACvC,CAEAE,OAAOhC,GACL,IAAIkC,EAAa,GACjBC,OAAOC,QAAQpC,GAAQ,CAAC,GAAGqC,SACzB,EAAEC,EAAGC,KACFL,GAAc,sFAGXI,+DAGAC,0CAKRhC,KAAKD,GAAGkC,UAA2B,KAAfN,EAAoB,UAAYA,CACtD,CACAO,OACE,MAAMC,EAAQpD,SAASqD,cAAc,KACrCD,EAAME,KAAOrC,KAAKF,OAAOwC,UAAU,aACnCH,EAAMI,SAAW,aACjBJ,EAAMK,OACR,CACAvC,YACED,KAAKH,MAAM4C,iBAAiB,QAAQ,IAAMzC,KAAKe,SAC/Cf,KAAKH,MAAM4C,iBAAiB,SAAS,IAAMzC,KAAKe,QAClD,EAGF,MAAM2B,IAAM,IAAIlD,YAAYV,OAAQG,QAASK,cAE7CJ,MAAMuD,iBAAiB,UAAU,KAC/B,GAAIvD,MAAMyD,OAAOC,OAAQ,CACvB,MAAMC,EAAa3D,MAAMyD,MAAM,GAC3B7D,SACES,wBACFuD,IAAIC,gBAAgBxD,wBAEtBA,uBAAyBuD,IAAIE,gBAAgBH,GAC7C/D,OAAOmE,IAAM1D,uBACbT,OAAO2D,iBAAiB,WAAW,KACjCC,IAAItB,QAAM,IAGhB,KAGFjC,gBAAgBsD,iBAAiB,SAAS,IAAMC,IAAIxC,aAAY,KAChEd,gBAAgBqD,iBAAiB,SAAS,IAAMC,IAAIxC,YAAY,KAChEb,YAAYoD,iBAAiB,SAAS,IAAMC,IAAIR","sources":["src/index.ts"],"sourcesContent":["const _video: HTMLVideoElement = document.querySelector(\"video\")!;\nconst _canvas: HTMLCanvasElement = document.querySelector(\"canvas\")!;\nconst _file: HTMLInputElement = document.querySelector(\"#file\")!;\nconst _frameDecButton: HTMLButtonElement =\n  document.querySelector(\"#dec-frame\")!;\nconst _frameIncButton: HTMLButtonElement =\n  document.querySelector(\"#inc-frame\")!;\nconst _saveButton: HTMLButtonElement = document.querySelector(\"#save\")!;\nconst _uiContainer: HTMLDivElement = document.querySelector(\"#meta-grid\")!;\n\nlet _prevUploadedObjectUrl: string | null = null;\n\nclass VideoPoster {\n  video: HTMLVideoElement;\n  canvas: HTMLCanvasElement;\n  UI: HTMLDivElement;\n  meta = {\n    width: 0,\n    height: 0,\n  };\n  constructor(\n    video: HTMLVideoElement,\n    canvas: HTMLCanvasElement,\n    UI: HTMLDivElement\n  ) {\n    this.video = video;\n    this.canvas = canvas;\n    this.UI = UI;\n    this.addEvents();\n  }\n\n  /**\n   *\n   * @param direction 1 represents number of  frame forward , -1 represents number of  frame backwards\n   */\n  moveByFrame(direction: number, frame: number = 1) {\n    if (direction < 0)\n      this.video.currentTime = Math.max(0, this.video.currentTime - frame / 25);\n    else\n      this.video.currentTime = Math.min(\n        this.video.duration,\n        this.video.currentTime + frame / 25\n      );\n  }\n  playPauseVideo() {\n    if (this.video.ended) this.video.currentTime = 0;\n    else if (this.video.paused) this.video.play();\n    else this.video.pause();\n  }\n  draw() {\n    const context: CanvasRenderingContext2D | null =\n      this.canvas.getContext(\"2d\");\n\n    if (context) {\n      // Have to clear the previous frame for transparent background videos\n      context.clearRect(0, 0, this.meta.width, this.meta.height);\n      // Drawing Video on canvas\n      context.drawImage(this.video, 0, 0, this.meta.width, this.meta.height);\n    }\n  }\n  onLoad() {\n    this.meta = {\n      width: this.video.videoWidth,\n      height: this.video.videoHeight,\n    };\n    this.video.width = this.meta.width;\n    this.video.height = this.meta.height;\n\n    this.canvas.width = this.meta.width;\n    this.canvas.height = this.meta.height;\n    const ticker = (_, meta) => {\n      this.draw();\n      this.drawUI(meta);\n      this.video.requestVideoFrameCallback(ticker);\n    };\n    this.video.requestVideoFrameCallback(ticker);\n  }\n\n  drawUI(meta) {\n    let htmlString = \"\";\n    Object.entries(meta || {}).forEach(\n      ([k, v]) =>\n        (htmlString += `\n      <div>\n        <div class=\"text-base capitalize font-semibold\">\n          ${k}\n        </div>\n        <div class=\"text-sm\">\n          ${v}\n        </div>\n      </div>\n    `)\n    );\n    this.UI.innerHTML = htmlString === \"\" ? \"No data\" : htmlString;\n  }\n  save() {\n    const alink = document.createElement(\"a\");\n    alink.href = this.canvas.toDataURL(\"image/png\");\n    alink.download = \"poster.png\";\n    alink.click();\n  }\n  addEvents() {\n    this.video.addEventListener(\"play\", () => this.draw());\n    this.video.addEventListener(\"pause\", () => this.draw());\n  }\n}\n\nconst app = new VideoPoster(_video, _canvas, _uiContainer);\n\n_file.addEventListener(\"change\", () => {\n  if (_file.files?.length) {\n    const file: File = _file.files[0];\n    if (_video) {\n      if (_prevUploadedObjectUrl) {\n        URL.revokeObjectURL(_prevUploadedObjectUrl);\n      }\n      _prevUploadedObjectUrl = URL.createObjectURL(file);\n      _video.src = _prevUploadedObjectUrl;\n      _video.addEventListener(\"canplay\", () => {\n        app.onLoad();\n      });\n    }\n  }\n});\n\n_frameDecButton.addEventListener(\"click\", () => app.moveByFrame(-1));\n_frameIncButton.addEventListener(\"click\", () => app.moveByFrame(1));\n_saveButton.addEventListener(\"click\", () => app.save());\n"],"names":["_video","document","querySelector","_canvas","_file","_frameDecButton","_frameIncButton","_saveButton","_uiContainer","_prevUploadedObjectUrl","VideoPoster","meta","width","height","constructor","video","canvas","UI","this","addEvents","moveByFrame","direction","frame","currentTime","Math","max","min","duration","playPauseVideo","ended","paused","play","pause","draw","context","getContext","clearRect","drawImage","onLoad","videoWidth","videoHeight","ticker","_","drawUI","requestVideoFrameCallback","htmlString","Object","entries","forEach","k","v","innerHTML","save","alink","createElement","href","toDataURL","download","click","addEventListener","app","files","length","file","URL","revokeObjectURL","createObjectURL","src"],"version":3,"file":"index.1aed19b1.js.map"}